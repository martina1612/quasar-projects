
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.
        
    The stub of this file was generated by Quasar (additional info: using transform designToDeviceBody.xslt) 
    on 2020-05-07T17:25:10.275+02:00
    
    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.
    
    
    
 */




#include <Configuration.hxx>

#include <DReadbackSettings.h>
#include <ASReadbackSettings.h>
#include <DChannel.h>
#include <ASChannel.h>




namespace Device
{




  // 1111111111111111111111111111111111111111111111111111111111111111111111111
  // 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
  // 1     Users don't modify this code!!!!                                  1
  // 1     If you modify this code you may start a fire or a flood somewhere,1
  // 1     and some human being may possible cease to exist. You don't want  1
  // 1     to be charged with that!                                          1 
  // 1111111111111111111111111111111111111111111111111111111111111111111111111






  // 2222222222222222222222222222222222222222222222222222222222222222222222222
  // 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
  // 2     (code for which only stubs were generated automatically)          2
  // 2     You should add the implementation but dont alter the headers      2
  // 2     (apart from constructor, in which you should complete initializati2
  // 2     on list)                                                          2 
  // 2222222222222222222222222222222222222222222222222222222222222222222222222

  /* sample ctr */
  DReadbackSettings::DReadbackSettings (const Configuration::
					ReadbackSettings & config,
					Parent_DReadbackSettings *
					parent):Base_DReadbackSettings
    (config, parent)
    /* fill up constructor initialization list here */
  {
    /* fill up constructor body here */
  }

  /* sample dtr */
  DReadbackSettings::~DReadbackSettings ()
  {
  }

  /* delegators for cachevariables and externalvariables */


  // 3333333333333333333333333333333333333333333333333333333333333333333333333
  // 3     FULLY CUSTOM CODE STARTS HERE                                     3
  // 3     Below you put bodies for custom methods defined for this class.   3
  // 3     You can do whatever you want, but please be decent.               3
  // 3333333333333333333333333333333333333333333333333333333333333333333333333

  void DReadbackSettings::update()
  {
	  float i0 = 0, v0 = 0, iMax = 0, iMin = 0, vMax = 0, vMin = 0;
	  bool onOff = 0, vProt = 0;
	  std::string vRange("");

	  //get the Channel-> get the powerSupply -> get its ps member -> exec command on member
	  getParent()->getParent()->ps->readCurrent(i0);
	  getParent()->getParent()->ps->readVoltage(v0);
	  getParent()->getParent()->ps->readImax(iMax);
	  getParent()->getParent()->ps->readImin(iMin);
	  getParent()->getParent()->ps->readVmax(vMax);
	  getParent()->getParent()->ps->readVmin(vMin);
	  getParent()->getParent()->ps->readOnoff(onOff);
	  getParent()->getParent()->ps->readVprotection(vProt);
	  getParent()->getParent()->ps->readVrange(vRange);

	  getAddressSpaceLink()->setI0(i0, OpcUa_Good);
	  getAddressSpaceLink()->setV0(v0, OpcUa_Good);
	  getAddressSpaceLink()->setIRangeMax(iMax, OpcUa_Good);
	  getAddressSpaceLink()->setIRangeMin(iMin, OpcUa_Good);
	  getAddressSpaceLink()->setVRangeMax(vMax, OpcUa_Good);
	  getAddressSpaceLink()->setVRangeMin(vMin, OpcUa_Good);
	  getAddressSpaceLink()->setOnOff(onOff, OpcUa_Good);
	  getAddressSpaceLink()->setVProtection(vProt, OpcUa_Good);
	  getAddressSpaceLink()->setVRange(vRange.c_str(), OpcUa_Good);
  }


}
