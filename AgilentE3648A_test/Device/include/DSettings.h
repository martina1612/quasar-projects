
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.
        
    The stub of this file was generated by Quasar (additional info: using transform designToDeviceHeader.xslt) 
    on 2020-05-08T16:17:46.452+02:00
    
    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.
    
    
    
 */





#ifndef __DSettings__H__
#define __DSettings__H__

#include <vector>
#include <boost/thread/mutex.hpp>

#include <statuscode.h>
#include <uadatetime.h>
#include <session.h>


#include <DRoot.h>
#include <Configuration.hxx>

#include <Base_DSettings.h>


namespace Device
{




  class DSettings:public Base_DSettings
  {

  public:
    /* sample constructor */
    explicit DSettings (const Configuration::Settings & config,
			Parent_DSettings * parent);
    /* sample dtr */
     ~DSettings ();




    /* delegators for
       cachevariables and sourcevariables */

    /* Note: never directly call this function. */


    UaStatus writeI0 (const OpcUa_Float & v);

    /* Note: never directly call this function. */


    UaStatus writeV0 (const OpcUa_Float & v);

    /* Note: never directly call this function. */


    UaStatus writeOnOff (const OpcUa_Boolean & v);

    /* Note: never directly call this function. */


    UaStatus writeVRange (const UaString & v);

    /* Note: never directly call this function. */


    UaStatus writeVProtection (const OpcUa_Boolean & v);


    /* delegators for methods */


  private:
    /* Delete copy constructor and assignment operator */
      DSettings (const DSettings &);
      DSettings & operator= (const DSettings & other);

    // ----------------------------------------------------------------------- *
    // -     CUSTOM CODE STARTS BELOW THIS COMMENT.                            *
    // -     Don't change this comment, otherwise merge tool may be troubled.  *
    // ----------------------------------------------------------------------- *

  public:

  private:


  };





}

#endif // include guard
